/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Receiver as PrismaReceiver } from "@prisma/client";

export class ReceiverServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReceiverCountArgs, "select">): Promise<number> {
    return this.prisma.receiver.count(args);
  }

  async receivers(
    args: Prisma.ReceiverFindManyArgs
  ): Promise<PrismaReceiver[]> {
    return this.prisma.receiver.findMany(args);
  }
  async receiver(
    args: Prisma.ReceiverFindUniqueArgs
  ): Promise<PrismaReceiver | null> {
    return this.prisma.receiver.findUnique(args);
  }
  async createReceiver(
    args: Prisma.ReceiverCreateArgs
  ): Promise<PrismaReceiver> {
    return this.prisma.receiver.create(args);
  }
  async updateReceiver(
    args: Prisma.ReceiverUpdateArgs
  ): Promise<PrismaReceiver> {
    return this.prisma.receiver.update(args);
  }
  async deleteReceiver(
    args: Prisma.ReceiverDeleteArgs
  ): Promise<PrismaReceiver> {
    return this.prisma.receiver.delete(args);
  }
}
