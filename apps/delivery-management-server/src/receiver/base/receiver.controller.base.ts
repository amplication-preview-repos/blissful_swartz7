/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReceiverService } from "../receiver.service";
import { ReceiverCreateInput } from "./ReceiverCreateInput";
import { Receiver } from "./Receiver";
import { ReceiverFindManyArgs } from "./ReceiverFindManyArgs";
import { ReceiverWhereUniqueInput } from "./ReceiverWhereUniqueInput";
import { ReceiverUpdateInput } from "./ReceiverUpdateInput";

export class ReceiverControllerBase {
  constructor(protected readonly service: ReceiverService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Receiver })
  async createReceiver(
    @common.Body() data: ReceiverCreateInput
  ): Promise<Receiver> {
    return await this.service.createReceiver({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Receiver] })
  @ApiNestedQuery(ReceiverFindManyArgs)
  async receivers(@common.Req() request: Request): Promise<Receiver[]> {
    const args = plainToClass(ReceiverFindManyArgs, request.query);
    return this.service.receivers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Receiver })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async receiver(
    @common.Param() params: ReceiverWhereUniqueInput
  ): Promise<Receiver | null> {
    const result = await this.service.receiver({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Receiver })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReceiver(
    @common.Param() params: ReceiverWhereUniqueInput,
    @common.Body() data: ReceiverUpdateInput
  ): Promise<Receiver | null> {
    try {
      return await this.service.updateReceiver({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Receiver })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReceiver(
    @common.Param() params: ReceiverWhereUniqueInput
  ): Promise<Receiver | null> {
    try {
      return await this.service.deleteReceiver({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
