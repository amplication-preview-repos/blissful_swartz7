/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Receiver } from "./Receiver";
import { ReceiverCountArgs } from "./ReceiverCountArgs";
import { ReceiverFindManyArgs } from "./ReceiverFindManyArgs";
import { ReceiverFindUniqueArgs } from "./ReceiverFindUniqueArgs";
import { CreateReceiverArgs } from "./CreateReceiverArgs";
import { UpdateReceiverArgs } from "./UpdateReceiverArgs";
import { DeleteReceiverArgs } from "./DeleteReceiverArgs";
import { ReceiverService } from "../receiver.service";
@graphql.Resolver(() => Receiver)
export class ReceiverResolverBase {
  constructor(protected readonly service: ReceiverService) {}

  async _receiversMeta(
    @graphql.Args() args: ReceiverCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Receiver])
  async receivers(
    @graphql.Args() args: ReceiverFindManyArgs
  ): Promise<Receiver[]> {
    return this.service.receivers(args);
  }

  @graphql.Query(() => Receiver, { nullable: true })
  async receiver(
    @graphql.Args() args: ReceiverFindUniqueArgs
  ): Promise<Receiver | null> {
    const result = await this.service.receiver(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Receiver)
  async createReceiver(
    @graphql.Args() args: CreateReceiverArgs
  ): Promise<Receiver> {
    return await this.service.createReceiver({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Receiver)
  async updateReceiver(
    @graphql.Args() args: UpdateReceiverArgs
  ): Promise<Receiver | null> {
    try {
      return await this.service.updateReceiver({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Receiver)
  async deleteReceiver(
    @graphql.Args() args: DeleteReceiverArgs
  ): Promise<Receiver | null> {
    try {
      return await this.service.deleteReceiver(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
