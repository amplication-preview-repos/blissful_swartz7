/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DeliveryRequestService } from "../deliveryRequest.service";
import { DeliveryRequestCreateInput } from "./DeliveryRequestCreateInput";
import { DeliveryRequest } from "./DeliveryRequest";
import { DeliveryRequestFindManyArgs } from "./DeliveryRequestFindManyArgs";
import { DeliveryRequestWhereUniqueInput } from "./DeliveryRequestWhereUniqueInput";
import { DeliveryRequestUpdateInput } from "./DeliveryRequestUpdateInput";

export class DeliveryRequestControllerBase {
  constructor(protected readonly service: DeliveryRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeliveryRequest })
  async createDeliveryRequest(
    @common.Body() data: DeliveryRequestCreateInput
  ): Promise<DeliveryRequest> {
    return await this.service.createDeliveryRequest({
      data: data,
      select: {
        approvalStatus: true,
        createdAt: true,
        id: true,
        requesterName: true,
        successfulDeliveryTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DeliveryRequest] })
  @ApiNestedQuery(DeliveryRequestFindManyArgs)
  async deliveryRequests(
    @common.Req() request: Request
  ): Promise<DeliveryRequest[]> {
    const args = plainToClass(DeliveryRequestFindManyArgs, request.query);
    return this.service.deliveryRequests({
      ...args,
      select: {
        approvalStatus: true,
        createdAt: true,
        id: true,
        requesterName: true,
        successfulDeliveryTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeliveryRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deliveryRequest(
    @common.Param() params: DeliveryRequestWhereUniqueInput
  ): Promise<DeliveryRequest | null> {
    const result = await this.service.deliveryRequest({
      where: params,
      select: {
        approvalStatus: true,
        createdAt: true,
        id: true,
        requesterName: true,
        successfulDeliveryTime: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeliveryRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDeliveryRequest(
    @common.Param() params: DeliveryRequestWhereUniqueInput,
    @common.Body() data: DeliveryRequestUpdateInput
  ): Promise<DeliveryRequest | null> {
    try {
      return await this.service.updateDeliveryRequest({
        where: params,
        data: data,
        select: {
          approvalStatus: true,
          createdAt: true,
          id: true,
          requesterName: true,
          successfulDeliveryTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeliveryRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDeliveryRequest(
    @common.Param() params: DeliveryRequestWhereUniqueInput
  ): Promise<DeliveryRequest | null> {
    try {
      return await this.service.deleteDeliveryRequest({
        where: params,
        select: {
          approvalStatus: true,
          createdAt: true,
          id: true,
          requesterName: true,
          successfulDeliveryTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
