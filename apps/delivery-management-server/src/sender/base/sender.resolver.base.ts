/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Sender } from "./Sender";
import { SenderCountArgs } from "./SenderCountArgs";
import { SenderFindManyArgs } from "./SenderFindManyArgs";
import { SenderFindUniqueArgs } from "./SenderFindUniqueArgs";
import { CreateSenderArgs } from "./CreateSenderArgs";
import { UpdateSenderArgs } from "./UpdateSenderArgs";
import { DeleteSenderArgs } from "./DeleteSenderArgs";
import { SenderService } from "../sender.service";
@graphql.Resolver(() => Sender)
export class SenderResolverBase {
  constructor(protected readonly service: SenderService) {}

  async _sendersMeta(
    @graphql.Args() args: SenderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Sender])
  async senders(@graphql.Args() args: SenderFindManyArgs): Promise<Sender[]> {
    return this.service.senders(args);
  }

  @graphql.Query(() => Sender, { nullable: true })
  async sender(
    @graphql.Args() args: SenderFindUniqueArgs
  ): Promise<Sender | null> {
    const result = await this.service.sender(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Sender)
  async createSender(@graphql.Args() args: CreateSenderArgs): Promise<Sender> {
    return await this.service.createSender({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Sender)
  async updateSender(
    @graphql.Args() args: UpdateSenderArgs
  ): Promise<Sender | null> {
    try {
      return await this.service.updateSender({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sender)
  async deleteSender(
    @graphql.Args() args: DeleteSenderArgs
  ): Promise<Sender | null> {
    try {
      return await this.service.deleteSender(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
