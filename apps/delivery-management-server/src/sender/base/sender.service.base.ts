/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Sender as PrismaSender } from "@prisma/client";

export class SenderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SenderCountArgs, "select">): Promise<number> {
    return this.prisma.sender.count(args);
  }

  async senders(args: Prisma.SenderFindManyArgs): Promise<PrismaSender[]> {
    return this.prisma.sender.findMany(args);
  }
  async sender(
    args: Prisma.SenderFindUniqueArgs
  ): Promise<PrismaSender | null> {
    return this.prisma.sender.findUnique(args);
  }
  async createSender(args: Prisma.SenderCreateArgs): Promise<PrismaSender> {
    return this.prisma.sender.create(args);
  }
  async updateSender(args: Prisma.SenderUpdateArgs): Promise<PrismaSender> {
    return this.prisma.sender.update(args);
  }
  async deleteSender(args: Prisma.SenderDeleteArgs): Promise<PrismaSender> {
    return this.prisma.sender.delete(args);
  }
}
